#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sotaserver:server');
var https = require('https');
const tls = require('tls');
const logger = require('../common/logger.js');

// Client Should use TLS 1.3
tls.DEFAULT_MIN_VERSION = 'TLSv1.3';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('33341');
app.set('port', port);

/**
 * Create HTTPS server.
 */
// TODO: need to imporve option for proper chiper suite and so on.


// inho.kang add get cipher
var ciphers = tls.getCiphers();
logger.info(ciphers); // ['AES128-SHA', 'AES256-SHA', ...]

var db = require('../storage/db');


// inho.kang add testcode
var options = {
  requestCert: true
};

db.getKey(key => {
  options.key = key;
  db.getCert(cert => {
    options.cert = cert;
    db.getCACert(cacert => {
      options.ca = cacert;
      startServer();
    });
  });
});


function startServer() {

  var server = https.createServer(options, app);

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    logger.info('Listening on ' + bind);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */

  logger.info("Start server...");

  server.listen(port);

  server.on('secureConnection', (tlssocket) => {
    logger.info('server connected',
                tlssocket.authorized ? 'authorized' : 'unauthorized');
  });

  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    logger.error('Error : ' + error);
    return    
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      logger.error('Listen error => error code[%s]', error.code);
      process.exit(error.errno);
      break;
  }
}


